#!/bin/bash
set -e

# enter project's root dir
APP_DIR=$(dirname "$(readlink -e "$0")")
cd "$APP_DIR/.."

# all builds with ninja
for tc in gcc clang default
do
  for build in Debug Release Relwithdebinfo Profile
  do
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo "$0: building $build with $tc toolchain"
    echo ""
    if [ "$build" = "Profile" ] && [ "$tc" = "clang" ]
    then
      echo "$0: skipping clang/Profile build, due to Clang error..."
      continue
    fi
    (
      mkdir -p "build/script/$tc/$build"
      cd "$_"
      if [ "$tc" = "default" ]
      then
        TCC=""
      else
        TCC="-DCMAKE_TOOLCHAIN_FILE=../../../../src/cmake/toolchains/$tc.cmake"
      fi
      time cmake $TCC "-DCMAKE_BUILD_TYPE=$build" -G Ninja ../../../../
      time ninja all but_tests_manual but_tests_auto
      time ctest
    )
  done
done

# check build with make
(
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo "$0: building make-based build"
    echo ""
  mkdir -p "build/script/make-based"
  cd "$_"
  time cmake -G 'Unix Makefiles' ../../../
  time make -j$(nproc) all
  time make -j$(nproc) but_tests_manual
  time make -j$(nproc) but_tests_auto
  time ctest
)

# sanitizers
for san in address undefined thread
do
  (
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo "$0: building $san-sanitized clang debug"
    echo ""
    mkdir -p "build/script/sanitize-clang-$san/"
    cd "$_"
    time cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DSANITIZE="$san" -DCMAKE_TOOLCHAIN_FILE=../../../src/cmake/toolchains/clang.cmake ../../../
    time ninja all but_tests_manual but_tests_auto
    time ctest
  )
done
