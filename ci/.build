#!/bin/bash
set -ex

if [ "$1" == "--help" ] || [ $# -ne 0 ] && [ $# -ne 1 ]
then
  echo "$0 # no arguments, for default, incremental build"
  echo "$0 {--clean-build}  # will remove destination dir, if present"
  exit 1
fi

env
nproc
free -m
( set +e ; type -p docker && docker version ; exit 0 )

read PREFIX TOOLCHAIN TYPE SANITIZER <<< $(basename "$0" | tr '_' ' ')
unset PREFIX

APP_DIR=$(dirname "$(readlink -e "$0")")
SRC_DIR=$(readlink -e "$APP_DIR/..")

cd "$SRC_DIR/build/"
BUILD_DIR="${TOOLCHAIN}/$TYPE/${SANITIZER}"
if [ $# -eq 1 ]
then
  if [ "$1" != "--clean-build" ]
  then
    exec "$0" "--help"
  fi
  rm -rfv "$BUILD_DIR"
fi
mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

if [ "$TOOLCHAIN" = "default" ]
then
  TCC=""
else
  TCC="-DCMAKE_TOOLCHAIN_FILE=$SRC_DIR/src/cmake/toolchains/${TOOLCHAIN}.cmake"
fi

if [ "$SANITIZER" = "none" ]
then
  SAN=""
else
  SAN="-DBUT_SANITIZE=$SANITIZER"
fi

time cmake $TCC $SAN "-DCMAKE_BUILD_TYPE=$TYPE" "-DBUT_ENABLE_TESTS=ON" -G Ninja "$SRC_DIR"
time ninja all

# self-test of sanitizers
case "$SANITIZER" in
  "thread")
    if ./src/but_testThreadSanitizer.manual &>/dev/null
    then
      echo "$0: thread sanitizer does not work"
      exit 40
    fi
  ;;

  "address")
    if ./src/but_testLeak.manual &>/dev/null
    then
      echo "$0: address sanitizer does not work"
      exit 41
    fi
    if ./src/but_testAddressSanitizer.manual &>/dev/null
    then
      echo "$0: address sanitizer does not work"
      exit 42
    fi
  ;;

  "undefined")
    if ./src/but_testUndefinedBehaviorSanitizer.manual &>/dev/null
    then
      echo "$0: undefined behavior sanitizer does not work"
      exit 43
    fi
  ;;
esac

time ctest -V
